
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Java : https://www.devmedia.com.br/encapsulamento-polimorfismo-heranca-em-java/12991
  -4 pilares OO : Abstração - construir classe apropriada concentrando no que ela importa para a determinada finalidade
                  Encapsulamento - ocultar os detalhes da implementação e acesso aos atributos -> public get and set : private atributos
                  Polimorfismo -  Fazer a mesma coisa de forma diferente Exemplo: OperacaoMatematica -> calcular
			      Herança - A capacidade que uma classe tem de herdar informações de outras classes. Exemplo: ContaPoupanca extends Conta -> this.saldo 
  Superclasse  -> 1 extends 
  Extender -> N implements 
  
    --------------------------- CLASSE ABSTRATA  ------------------------------
	abstract class Conta {
		private double saldo;
		public void setSaldo(double saldo) { this.saldo = saldo;}
		public double getSaldo() {return saldo;}
		
		public abstract void imprimeExtrato();
	}
	
	public class ContaPoupanca extends Conta {
		@Override
		public void imprimeExtrato() {
			System.out.println("### Extrato da Conta ###");
			SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/aaaa HH:mm:ss");
			Date date = new Date();
			System.out.println("Saldo: "+this.getSaldo());
		}
	}
	--------------------------- ABSTRAÇÃO POLIMORFISMO  ------------------------------
	public class OperacaoMatematica {
		public double calcular(double x, double y){ return 0;}
	}
    public class Soma extends OperacaoMatematica {
		public double calcular(double x, double y){
			return x + y;
		}
	}
	public class Multiplicacao extends OperacaoMatematica {
		public double calcular(double x, double y){
			return x * y;
		}
	}

	public class TestaOperacaoMatematica {
		//OperacaoMatematica ABSTRAÇÃO POLIMORFISMO 
		public static void calculaOperacao(OperacaoMatematica o, double x, double y){
			System.out.println(o.calcular(x, y));
		}

		public static void main(String[] args) {
			calculaOperacao (new Soma(), 2500, 200);
			calculaOperacao (new Multiplicacao(), 10, 10);
		}
}

https://www.youtube.com/watch?v=mkx0CdWiPRA
Padrões projeto 
  SOLID - cinco patterns, Independente de linguagem.  *desing prematuro(cuidado)

  - S : Single Responsibility Principle - Princípio da Responsabilidade Única
        A classe so pode ter um, e somente um, motivo para mudar. Entidades Independentes e Isoladas
		  Facilita : Classe metodos e funções
		   -Refatoração
		   -Testes automatizados
	       -Reaproveitar o Código
		   -menos bug, mais facil de manter, isolado
		
  - O : Open/Closed Principle - Princípio Aberto/Fechado Aberto para Extensões e Fechado para modificações 
        Capacidade de extender  o comportamento de uma classe sem ter que modificar
		gestão de suas propriedades, atibutos outras ações comportamento via interface
		
  - L : Liskov Substitution Principle - Princípio da Substituição de Liskov - Barbara liskov
        As classes derivadas tem que ser substituíves pela suas classes bases - calcular a area de retangulo, tambem sabe calcular a area de um quadrado "sub tipo"
        injeção de dependencia
		
  - I : Interface Segregation Principle - Princípio da Segregação
        Muita interface especifica é melhor que uma genérica
		
  - D : Dependency Inversion Principle - Princípio da Inversão de Dependência
        Inversão de dependencia, depender da abstração e não de implementação 
     
Exemplos:

  		puclic class Retangulo implementes Area, Diagonal {
			public double altura;
			public double largura;	
			
			public double setLargura( double largura ){
				this.largura = largura;
			}
			
			public double setAltura( double altura){
				this.altura = altura;
			}
			
			@override
			public double calcularArea( ){
				return altura*largura;
			}
			
			@override
			public double obterDiagonal( ){
				return Math.sqrt((altura*altura) + (largura*largura));
			}
		}
		
		puclic class Quadrado extends Retangulo {		
			//super ja tem os atributos
			
			@override
			public double setLargura( double largura ){
				this.altura = largura;
				this.largura = largura;
			}
			
			@override
			public double setAltura( double altura){
				this.altura = altura;
				this.largura = altura;	
			}
			//super já tem o calculo de area
		}
		
		puclic class Circulo implementes Area, Diametro {
			public double raio;	
			
			@override
			public double calcularArea( ){
				return raio*raio*Math.PI;
			}
			
			@override
			public double obterDiametro( ){
				return 2*raio;
			}
		}
		
		puclic interface Area {
			public double calcularArea( );		
		}
		
		puclic interface Diametro {
			public double obterDiametro( );		
		}
		
		puclic interface Diagonal {
			public double obterDiagonal( );		
		}
		--------------- uso dos principios anteriores ---------------------
		puclic clas AreaController {
			public double calculoDeAreas( Arraylist<Area> areas){
				double valorArea = 0;
				for Area area : areas{
					valorArea = area.calcularArea();					
				}
			};		
		}    
		-------------------------------------------------------------------
		interface ProductRepo {
			Product getById(String productId);
		}

		// low level class depends on abstraction
		class SqlProductRepo implements ProductRepo {
			@Override
			public Product getById(String productId) { /* todo */ }
		}

		class MongoProductRepo implements ProductRepo {
			@Override
			public Product getById(String productId) { /* todo */ }
		}

		class ProductRepoFactory {
			public static ProductRepo create(String type) {
				if (type.equals(RepoType.NOSQL)) {
					return new MongoProductRepo();
				}
				return new SqlProductRepo();
			}
		}
	
		class PaymentProcessor {
			public void pay(String productId) {
				ProductRepo repo = ProductRepoFactory.create(RepoType.NOSQL); //Abstração 
				Product product = repo.getById(productId);
				this.processPayment(product);
			}
		}
		
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
VO
DTO
DAO
POJO
TO
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
https://pt.wikipedia.org/wiki/Padr%C3%A3o_de_projeto_de_software#:~:text=De%20acordo%20com%20o%20livro%3A%20%22Padr%C3%B5es%20de%20Projeto%3A%20solu%C3%A7%C3%B5es,s%C3%A3o%20divididos%20em%2024%20tipos.
26 Padrões "GoF" organizados nas suas 3 famílias:

  Padrões de criação
	Abstract Factory
	Object pool
	Builder
	Factory Method
	Prototype
	Singleton
  Padrões estruturais
	Private class data
	Adapter
	Bridge
	Composite
	Decorator
	Façade (ou Facade)
	Business Delegate
	Flyweight
	Proxy
  Padrões comportamentais[3]
	Chain of Responsibility
	Command
	Interpreter
	Iterator
	Mediator
	Memento
	Observer
	State
	Strategy - Open/Closed Principle do SOLID    
	Template Method
	Visitor


Padrões arquiteturais
	Interceptor
	Mvc (Model View Controler)
	Mvvm (Model View ViewModel)
	Mvp (Model View Presenter)
	n-tier (Arquitetura multicamada)
	Specification
	Publish–subscribe
	Inversion of control (Inversão de controle)
	Dependency Injection (Injeção de dependência)
	Intercepting filter
	Lazy loading
	Mock object (objeto mock) 
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Os padrões GRASP, sigla para General Responsibility Assignment Software Patterns (or Principles), consistem de um conjunto de práticas para atribuição de responsabilidades
a classes e objetos em projetos orientados a objeto.

	Padrões Básicos:
		Information Expert (ver Especialista na Informação);
		Creator (ver Factory Method);
		High Cohesion (ver Coesão);
		Low Coupling(ver Acoplamento);
		Controller(ver Model-view-controller).
	Padrões Avançados:
		Polymorphism (ver Polimorfismo);
		Pure Fabrication;
		Indirection (ver Indireção);
		Protected Variations (ver Variações Protegidas).

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=  
#ARQUITETURA NUVEM
  
  Api gateway -> Autenticação(OAuth2 Access) | Cache (Redis ou DynamoDb[aws]) 
   .Kong
   .Kubernetes Ingress
   .Zuul netflix / Spring cloud
   
  Load Balancer
   . Ribbon netflix / Spring cloud
   . Kubernetes Balance
   . API Publisher AWS
   
  Service Discovery 
    .API Microgateway AWS
    .Eureka netflix / Spring cloud
    .Kubernetes DSN
  
  Kubernetes : Orquestração de Contêiner 
    .POD 
      .Serviços -> Autorização(OAuth Scopes) | Service Config (Kubernets ConfigMap)
  	
  CQRS - Command Query Responsibility Segregation
   
  Message Broker
    . kafka
    . wso2 message broker
    . RabbitQM
    . Pub/Sub GCP
    
  monitoramento 
    .ELK Stack - Log / Monitoramento / Analytics  
   
  
  noSQL - MongoDb e RavenDB 
  cache - Redis (chave/valor) memoria
  Relacional - Orcale, postgreSQL, MySQL, SQL Server 
  Storege - S3 aws, Google cloud Storage
  cluster - HDFS Hadoop Distributed File System (MapReduce e GoogleFS)
 
 
                Method
  *http - Create > POST
     - Read   > GET
	 - Update > PUT
	 - Delete > DELETE

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
MENSAGERIA
  -AMQP
  -assíncrono
  -Escalabilidade 
  
  
  -producer \ publish 
  -exchange   -Broker
  -binding    -Broker
  -filas \ queue
  -consumer
  -subscribes
  
  -Direct
  -topic
  -fanout 
  
  -Excehnge types
  
  -route keys
  - mensagem
    -label
	-payload

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=	
noSQL: Desnormalizado, não tem integridade e transacional flexivel
   > Processamento Eficiente
   > Paralelismo 
   > Escalabilidade
   > custo
   
   4 tipos de banco noSQL
     - key-valeu kvp { Memoria, disco ou hibrido} (Redis, DynamoDb aws ou couchbase)
	 - Colunas ordenadas - Usado em data wherehouse ( hypertable e apache hbase) 
	 - Banco de dados de documentos (mongoDB) json
	 - Banco de dados grafos (neo4j)
	 
   "mongoDB" 
      Exemplos
       -Sessões de usuários em aplicações web
	   -Analise de series temporais
	   -EHR (Eletronic Health Records)
      
	  -formato json - compato e legivel
	  -Open source
	  -multiplataforma
	  -Escalável
	  -permite documentos ninhados
	  -indexados
	  -não tem schema fixo
	  -não tem integridade referencial
	  
      -Estrutura
	    - Coleção (Tabela)
		- Documento (linha)
		- Campo (Coluna)
      -Tipos
	    - String
		- Inteiro
		- boolean
		- Double
		- Array
		- timestamp
		- Object
 
      Comandos
	     criar um banco : use dbExemplo
		 Criar uma coleção(tabela) : db.createColletion("colecaoExemplo")
		 show collection // lista a coleções
		 Inserir um documento(linha) : db.colecaoExemplo.insert({ id: 1, nome: "nome Teste"})
		 Inserir Vários documentos(linhas) : db.colecaoExemplo.insert([{ id: 1, nome: "nome Teste"},{ id: 2, nome: "nome Teste 2"}])
			db.<coleção>.insert( json ) ou db.<coleção>.insert( [json,json] )
		 atualizar
			db.<coleção>.update({nome:"José"},{$set : {idade:29}})
			save()
			deleteOne()
			deleteMany()
			remove()
			remover Coleção : db.<coleção>.drop()
			 
	     Consulta
			db.<coleção>.find()  ou  db.<coleção>.find( {nome:"José"}) 
			db.<coleção>.findOne() 
			db.<coleção>.find().pretty() // todos em colunas 
			db.<coleção>.find().limit(50) //retorna so 50 documentos
		 $eq  > Igual a
		 $gt  > Maior que 
		 $gte > Maior ou igual que
		 $lt  > Menor que
		 $lte > Menor ou igual que
		 $ne  > diferente de
		 $in  > contém
		 $nin > não contém
		 $or  > ou
			db.<coleção>.find( {nome:"José",idade: {$lte 12}}) 
            db.<coleção>.find( {$or {nome:"José"},{nome:"Antonio"}}) 
			db.<coleção>.find( {nome : {$in: ["José","Antonio"]}}) 
		 projeção, retira as colunas da consulta se for 0
		    db.<coleção>.find( {nome:"José"},{id: 0, data: 0}) 
        ordenação
		    db.<coleção>.find().sort({nome:1) //Crescente
			db.<coleção>.find().sort({nome:-1) //Decrescente
            db.<coleção>.find({idade: {$lte 12}}).sort({nome:1).limit(5)
 
 

 
  
